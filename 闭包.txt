闭包
闭包是指有权访问另一个函数作用域中的变量的函数，创建闭包常见的方式，就是在一个函数内部创建另一个函数。

了解闭包，首先理解js中的作用域
作用域分为全局作用域和局部作用域
1.函数内部能访问全局变量。
2.函数外部正常情况下不能访问函数内的局部变量
2.1注意：函数内部声明变量是，一定要使用var，let，如果不用为全局变量。


下面举个例子
在当前作用域中没有找到    就向他的上一级寻找   （一直到全局） 当在当前作用域中找到 不会再往上一级寻找！
	var a=1;
	function t1(){
		var b=2;
		function t2(){
			var c=3
			alert(a+b+c)
		}
			t2()
	}
	t1()//6
//-----------------------------------------------			
	function fn(){
		b=5;
		var a=0;
	}
		fn()
		console.log(b)//5
		console.log(a)//报错
		如果不用var，则是一个赋值的作用
		不要狭隘的认为是一个声明全局变量
		由内往外查找
//-----------------------------------------			
		function fn(){
			var a;
			function fn1(){
				a=5;
				b=6;
			}
		fn1()
}
fn()
console.log(b)//6
console.log(window.a)//undefined
console.log(a)//报错  函数中的变量   外边访问不到

//-------------------------------------------------

例子说明闭包
function t1(){
	var age=20;
	function t2(){
		alert(age)
	}
	return t2;
}
age=20这个变量，被t2捕捉，即使t1执行完毕，通过t2，依然能访问到该变量
这种情况--返回的函数，并非孤立的函数，甚至把其周围的变量环境，形成一种封闭的“环境包”，共同返回，所以叫“闭包”

简单概括  -- 函数作用域取决于声明时，而不取决于调用时

闭包计数器
function fn1(){
	var n=0;      //当fn1执行完毕后，除了返回的fn2的函数，谁也别想碰到n变量
	function fn2(){
		return ++n	
	}
	return fn2;

}
var inc=fn1()

console.log(inc())//1
console.log(inc())//2
console.log(inc())//3

为什么会这样呢？原因就在于f1是f2的父函数，而f2被赋给了一个全局变量，这导致f2始终在内存中，而f2的存在依赖于f1，因此f1也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。